/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { taskCreatePost } from '../fn/tasks/task-create-post';
import { TaskCreatePost$Params } from '../fn/tasks/task-create-post';
import { taskUpdateIdPut } from '../fn/tasks/task-update-id-put';
import { TaskUpdateIdPut$Params } from '../fn/tasks/task-update-id-put';

@Injectable({ providedIn: 'root' })
export class TasksService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `taskCreatePost()` */
  static readonly TaskCreatePostPath = '/task/create';

  /**
   * Create a new task.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `taskCreatePost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  taskCreatePost$Response(params: TaskCreatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return taskCreatePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new task.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `taskCreatePost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  taskCreatePost(params: TaskCreatePost$Params, context?: HttpContext): Observable<void> {
    return this.taskCreatePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `taskUpdateIdPut()` */
  static readonly TaskUpdateIdPutPath = '/task/update/{id}';

  /**
   * Update a task.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `taskUpdateIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  taskUpdateIdPut$Response(params: TaskUpdateIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return taskUpdateIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update a task.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `taskUpdateIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  taskUpdateIdPut(params: TaskUpdateIdPut$Params, context?: HttpContext): Observable<void> {
    return this.taskUpdateIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
